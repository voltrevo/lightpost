'use strict';

exports.interpreter = function()
{
    var self = this;
    
    this.symbols =
    {
        '+':
        {
            argc: 2,
            exec: function(a, b) { return a + b; }
        },
        '-':
        {
            argc: 2,
            exec: function(a, b) { return a - b; }
        },
        '*':
        {
            argc: 2,
            exec: function(a, b) { return a * b; }
        },
        '/':
        {
            argc: 2,
            exec: function(a, b) { return a / b; }
        },
        '%':
        {
            argc: 2,
            exec: function(a, b) { return a % b; }
        },
        '**':
        {
            argc: 2,
            exec: function(a, b) { return Math.pow(a, b); }
        },
        '<':
        {
            argc: 2,
            exec: function(a, b) { return a < b; }
        },
        '>':
        {
            argc: 2,
            exec: function(a, b) { return a > b; }
        },
        '<=':
        {
            argc: 2,
            exec: function(a, b) { return a <= b; }
        },
        '>=':
        {
            argc: 2,
            exec: function(a, b) { return a >= b; }
        },
        '==':
        {
            argc: 2,
            exec: function(a, b) { return a == b; }
        },
        '!=':
        {
            argc: 2,
            exec: function(a, b) { return a != b; }
        },
        'print':
        {
            argc: 1,
            exec: function(s) { console.log(s); }
        }
    };
    
    this.handle_string = function(str)
    {
        for (var i = 0; i != str.length; i++)
        {
            self.comment_layer.handle_char(str[i]);
        }
    }
    
    this.comment_layer = new (function()
    {
        var layer = this;
        
        this.next_layer = null;
        
        this.had_slash = false;
        this.had_star = false;
        
        this.block_depth = 0;
        this.block_has_newline = false;

        this.handle_char = function(c)
        {
            //console.log('comment layer: \'' + c + '\'');
            layer.mode(c);
        }
        
        this.normal_mode = function(c)
        {
            if (layer.had_slash)
            {
                layer.had_slash = false;
                
                if (c === '/')
                {
                    layer.mode = layer.line_comment_mode;
                }
                else if (c === '*')
                {
                    layer.block_depth = 1;
                    layer.mode = layer.block_comment_mode;
                }
                else
                {
                    next_layer.handle_char('/');
                    next_layer.handle_char(c);
                }
            }
            else
            {
                if (c === '/')
                {
                    layer.had_slash = true;
                }
                else
                {
                    layer.next_layer.handle_char(c);
                }
            }
        }
        
        this.line_comment_mode = function(c)
        {
            if (c === '\n')
            {
                layer.mode = layer.normal_mode;
                layer.next_layer.handle_char('\n');
            }
        }

        this.block_comment_mode = function(c)
        {
            if (layer.had_slash)
            {
                layer.had_slash = false;
                
                if (c === '*')
                {
                    layer.block_depth++;
                    //console.log('incremented block depth to ' + layer.block_depth);
                }
                else if (c === '\n')
                {
                    layer.block_has_newline = true;
                }
            }
            else if (layer.had_star)
            {
                layer.had_star = false;

                if (c === '/')
                {
                    layer.block_depth--;
                    //console.log('decremented block depth to ' + layer.block_depth);

                    if (layer.block_depth === 0)
                    {
                        layer.next_layer.handle_char(layer.block_has_newline ? '\n' : ' ');
                        layer.block_has_newline = false;
                        layer.mode = layer.normal_mode;
                    }
                }
                else if (c === '\n')
                {
                    layer.block_has_newline = true;
                }
            }
            else
            {
                if (c === '/')
                {
                    layer.had_slash = true;
                }
                else if (c === '*')
                {
                    layer.had_star = true;
                }
            }
        }
        
        this.mode = this.normal_mode;
    })();
    
    this.word_layer = new (function()
    {
        var layer = this;

        this.next_layer = null;
        
        this.word = '';
        
        this.handle_char = function(c)
        {
            //console.log('word layer: \'' + c + '\'');
            if (c === ' ' || c === '\n' || c === '\t' || c === '\r')
            {
                if (layer.word !== '')
                {
                    layer.next_layer.handle_word(layer.word);
                    layer.word = '';
                }
            }
            else
            {
                layer.word += c;
            }
        }
    })();
    
    this.comment_layer.next_layer = this.word_layer;
    
    this.exec_layer = new (function()
    {
        var layer = this;
        
        layer.stack = [];
        
        this.handle_word = function(word)
        {
            if (self.symbols[word])
            {
                var symbol = self.symbols[word];
                
                if (layer.stack.length < symbol.argc)
                {
                    console.error('Error: Not enough arguments for ' + word);
                    layer.stack.length = 0;
                }
                
                var ret = symbol.exec.apply(null, layer.stack.splice(layer.stack.length - symbol.argc, symbol.argc));

                if (ret !== undefined)
                {
                    layer.stack.push(ret);
                }
            }
            else if (word === 'inspect')
            {
                console.log(layer.stack);
            }
            else
            {
                layer.stack.push(parseFloat(word)); // TODO 97asdf -> 97, should be error
            }
        }
    })();
    
    this.word_layer.next_layer = this.exec_layer;
}
